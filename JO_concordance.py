"""
The website https://www.thefreedictionary.com defines concordance as "An alphabetical
index of all the words in a text or corpus of texts, showing every contextual occurrence of a
word". Very often you see the word concordance used in a reference the Bible or the works
of Shakespeare.
All prompts and format of output must be duplicated. Refer to log.txt .
For this project you will write a Python program where you will prompt
the user for a file name. You will read through the file and create a dictionary. Remember a
Python dictionary has keys and values. The keys will be the words within the file
and the value associated with a key will be a list of tuples with a format of (word#, line #) .
The information within each tuple is the human view of line# and word#.
The dictionary entry for the word 'gave' might look like:
'gave': [(7, 20), (16, 11)]
This is to be interpreted that 'gave' appears on
line 7 of the file and is the 20th word
line 16 and is the 11th word
When a line is read all punctation characters should be replaced by a space.
This includes period, comma, colon, hyphen, semi-colon, exclamation mark,
single quote and double quote.
Words that are 2 characters or shorter are not to be stored in the concordance.
Also exclude the following words from the concordance:
are, and, but, from, that, the, this
'Gave' and 'gave' should be treated as the same lower-case word.
The program should have a menu for the following single letter commands. Refer to
log.txt for the precise format of all output. Any text shown in italics should have
appropriate values.
L prints the word with the longest length. If multiple words have the same longest
length, display the one earliest in alphabetic sequence
M prints the word that occurs most frequently. If multiple words have the same
highest frequency, display the one earliest in alphabetic sequence.
C prints the complete concordance.
N prints the number of words (keys) stored in the concordance.
K prints only the words (keys) in the concordance.
D prints the directions.
Q causes the program to terminate and before the program terminates,
prints yourProgramName terminating
W Will respond by prompting with “Enter a word: "
then the program will print the list of tuples for the word
or prints “word not in concordance”
a-z Any lower-case letter causes all words that start with that letter to be printed.
If there are no words starting with the letter,
print There are no words starting with 'thatLetter’
other Any other single character, like A or Z or 4 or $, etc.
should result in printing thatCharacter is an invalid command
The program should have a loop such after executing the response to the command letter, the
program prompts for another command.
If the user entry for a command is not a single character, the program should print
thatInput is not a single command letter
It is recommended to implement a function to be the response for most of the commands.
Another recommendation is to develop the response for each command letter one at time,
probably starting with C , N , and K .
For L and M , if you have previously called a function to find the required values, do not call
the function again. Instead print out values that were previously stored.
You cannot use any import of modules other than os and sys
You cannot use a lamda function
You cannot use any solution generated by chatGPT or similar generative AI engine
The order of keys in a dictionary appear in the order that the keys and their values are stored.
But, by definition a concordance holds its words in alphabetic order.
With help from the web page:
https://www.freecodecamp.org/news/python-sort-dictionary-by-key/
The following Python line shows how to sort a dictionary with the name citations
citations = dict(sorted(citations.items()))

"""


print("""
Enter one of the following command letters
	L prints the longest word
	M prints the most frequent word
	C prints the complete concordance
	N prints the number of words in the concordance
	K prints only the words, i.e. keys
	W prompts for a word and prints all list of <line#, word#>
	a and other lower case letters, prints all words start with that letter
	D print the directions
	Q exit and stop accepting commands
""")

#'above': [(12, 2)]
concordance = {}
line = ''
line_count = 1
with open('getty.txt', 'r') as f:
    # When a line is read all punctation characters should be replaced by a space.
    # This includes period, comma, colon, hyphen, semi-colon, exclamation mark,
    # single quote and double quote.
    for original_line in f:
        line = ''
        for char in original_line:
            if char == '.' or char == ',' or char == ',' or char == ':' or char == '-' or char == ';' or char == '!' or char == '"' or char == "'":
                char = ' '
            line += char
        print(f'{line_count}. {line}')
        line_count += 1



"""
Words that are 2 characters or shorter are not to be stored in the concordance.
Also exclude the following words from the concordance:
are, and, but, from, that, the, this
"""
"""
invalid_words = ['are', 'and', 'but', 'from', 'that', 'the', 'this']
words = []
for word in remaining_words:
    if len(word) <= 2 or word in invalid_words:
        continue
    else:
        words.append(word.lower())

# now that you have the proper list of words, build the concordance dict
for word in words:
    if word not in concordance:
        concordance[word] = 1
    else:
        concordance[word] += 1

print(concordance)"""
